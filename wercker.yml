#box: openjdk:8-jdk 
box: maven:3.6.1-jdk-8
no-response-timeout: 10

#this is for building the code for dev2
build-test:
  steps:
  
    #this is for downloading the wallet
    - script:
        name: Set API_KEY file
        code:  |
            echo -ne "-----BEGIN RSA PRIVATE KEY-----\n" > gen-api.pem
            echo -ne $OS_APIKEY | tr " " "\n" >> gen-api.pem
            echo -ne "\n-----END RSA PRIVATE KEY-----\n" >> gen-api.pem
            
    - oci-objectstore:
        region:       $OS_REGION
        tenancy-ocid: $OS_TENANCY_OCID
        user-ocid:    $OS_USER_OCID
        fingerprint:  $OS_FINGERPRINT
        namespace:    $OS_NAMESPACE
        bucket-name:  $OS_WALLET_BUCKET_NAME_TEST
        command:      get
        api-key:      "$(cat gen-api.pem)"
        object-name:  $OS_WALLET_OBJECT_NAME

    - script:
        name: extract wallet
        code: unzip $OS_WALLET_OBJECT_NAME -d /opt/wallet/

  # maven commands to compile the code
  #  - wercker/maven:
  #    goals: package
  #    cache_repo: true
  #    version: 3.5.2

   # maven commands to compile the code - added by akila
    - script:
        name: compile code
        code: |
          cd /pipeline/source/dev
          mvn package

    # run sonarqube scans on the codebase
    - script:
        name: Execute sonarqube analyze process
        code: |
          date
          cd /pipeline/source/dev
          mvn sonar:sonar -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_USERNAME -Dsonar.password=$SONAR_PASSWORD -Dsonar.junit.reportPaths=target/surefire-reports -Dsonar.jacoco.reportPaths=target/jacoco.exec > ./temp_output
          SONAR_GET_REPORT_URL=`cat ./temp_output | grep "More about the report processing at " | awk -F 'at ' '{print substr($2,1)}'`
          cat ./temp_output
          echo $SONAR_GET_REPORT_URL 

    # check whether sonarqube test pass or fail
    - script:
        name: Get sonarqube analyze result
        code: |
        ls
         # for((i=1;i<=$SONAR_GET_RESULT_LOOP_CNT;i++));
         # do
         #   sleep 2m
         #   echo "Get Sonarqube analyze process..."
         #   reportProcess=$(curl -X GET -i $SONAR_GET_REPORT_URL | grep "status" | awk -F '"status":' '{print substr($2,2,7)}')
         #   echo $reportProcess
         #   if [ -z $reportProcess ]; then
         #     continue
         #   fi
         #   if [ $reportProcess = "IN_PROGRESS" ]; then
         #     continue
         #   else
         #     break
         #   fi
         # done
         # fullResult=$(curl -X GET -u $SONAR_USERNAME:$SONAR_PASSWORD -i $SONAR_URL/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY)
         # echo "Sonarqube analyze full result is:"
         # echo $fullResult
          # sonarResult=`echo $fullResult | grep projectStatus | awk -F '"status":' '{print substr($2,2,2)}'`
          # sonar result is hard coded untill confirmed by architects
          #sonarResult="OK"
          #if [ -z $sonarResult ]; then
          #  export sonarResult='NG'
          #fi
          #echo "Quality gate status is: $sonarResult"
          #if [ $sonarResult != "OK" ]; then
          #  exit 1
          #fi

    # Copy binary to location that gets passed along to next workflow
    - script:
        name: copy binary
        code: |
           cp /pipeline/source/dev/target/aml-risk-0.0.1-SNAPSHOT.jar "$WERCKER_OUTPUT_DIR"
           cp -R /pipeline/source/kubernetes "$WERCKER_OUTPUT_DIR"
           cp -R /pipeline/source/qa "$WERCKER_OUTPUT_DIR"
    
  # Notify if the steps are failure
  after-steps:
     - install-packages:
         packages: ruby
     - wantedly/pretty-slack-notify:
         webhook_url: $SLACK_WEBHOOK_URL
         failed_message: FAILURE - Pipeline completed. $WERCKER_RUN_URL


#this if to run test cases which are built by qa engineer
build-develop:
  steps:

    # maven commands to compile the code
  #  - wercker/maven:
  #    goals: package
  #    cache_repo: true
  #    version: 3.5.2

   # maven commands to compile the code - added by akila
    - script:
        name: compile code
        code: |
          cd /pipeline/source/dev
          mvn package -DskipTests=true 
    
  # Copy binary to location that gets passed along to next workflow
    - script:
        name: copy binary
        code: |
           cp /pipeline/source/dev/target/aml-risk-0.0.1-SNAPSHOT.jar "$WERCKER_OUTPUT_DIR"
           cp -R /pipeline/source/kubernetes "$WERCKER_OUTPUT_DIR"

   # Notify if the steps are failure
  after-steps:
     - install-packages:
         packages: ruby
     - wantedly/pretty-slack-notify:
         webhook_url: $SLACK_WEBHOOK_URL
         failed_message: FAILURE - Pipeline completed. $WERCKER_RUN_URL

#this if to run test cases which are built by qa engineer
build-uat:
  steps:

    #this is for downloading the wallet
    - script:
        name: Set API_KEY file
        code:  |
            echo -ne "-----BEGIN RSA PRIVATE KEY-----\n" > gen-api.pem
            echo -ne $OS_APIKEY | tr " " "\n" >> gen-api.pem
            echo -ne "\n-----END RSA PRIVATE KEY-----\n" >> gen-api.pem
            
    - oci-objectstore:
        region:       $OS_REGION
        tenancy-ocid: $OS_TENANCY_OCID
        user-ocid:    $OS_USER_OCID
        fingerprint:  $OS_FINGERPRINT
        namespace:    $OS_NAMESPACE
        bucket-name:  $OS_WALLET_BUCKET_NAME_UAT
        command:      get
        api-key:      "$(cat gen-api.pem)"
        object-name:  $OS_WALLET_OBJECT_NAME

    - script:
        name: extract wallet
        code: unzip $OS_WALLET_OBJECT_NAME -d /opt/wallet/



    # maven commands to compile the code
  #  - wercker/maven:
  #    goals: package
  #    cache_repo: true
  #    version: 3.5.2

   # maven commands to compile the code - added by akila
    - script:
        name: compile code
        code: |
          cd /pipeline/source/dev
          mvn package -DskipTests=true 
    
  # Copy binary to location that gets passed along to next workflow
    - script:
        name: copy binary
        code: |
           cp /pipeline/source/dev/target/aml-risk-0.0.1-SNAPSHOT.jar "$WERCKER_OUTPUT_DIR"
           cp -R /pipeline/source/kubernetes "$WERCKER_OUTPUT_DIR"

   # Notify if the steps are failure
  after-steps:
     - install-packages:
         packages: ruby
     - wantedly/pretty-slack-notify:
         webhook_url: $SLACK_WEBHOOK_URL
         failed_message: FAILURE - Pipeline completed. $WERCKER_RUN_URL

#this if for building the code for master
build-master:
  steps:

    #this is for downloading the wallet
    - script:
        name: Set API_KEY file
        code:  |
            echo -ne "-----BEGIN RSA PRIVATE KEY-----\n" > gen-api.pem
            echo -ne $OS_APIKEY | tr " " "\n" >> gen-api.pem
            echo -ne "\n-----END RSA PRIVATE KEY-----\n" >> gen-api.pem
            
    - oci-objectstore:
        region:       $OS_REGION
        tenancy-ocid: $OS_TENANCY_OCID
        user-ocid:    $OS_USER_OCID
        fingerprint:  $OS_FINGERPRINT
        namespace:    $OS_NAMESPACE
        bucket-name:  $OS_WALLET_BUCKET_NAME_MASTER
        command:      get
        api-key:      "$(cat gen-api.pem)"
        object-name:  $OS_WALLET_OBJECT_NAME

    - script:
        name: extract wallet
        code: unzip $OS_WALLET_OBJECT_NAME -d /opt/wallet/  
    # maven commands to compile the code
  #  - wercker/maven:
  #    goals: package
  #    cache_repo: true
  #    version: 3.5.2

   # maven commands to compile the code - added by akila
    - script:
        name: compile code
        code: |
          cd /pipeline/source/dev
          mvn package -DskipTests=true 

    # Copy binary to location that gets passed along to next workflow
    - script:
        name: copy binary
        code: |
           cp /pipeline/source/dev/target/aml-risk-0.0.1-SNAPSHOT.jar "$WERCKER_OUTPUT_DIR"
           cp -R /pipeline/source/kubernetes "$WERCKER_OUTPUT_DIR"
    
  # Notify if the steps are failure
  after-steps:
     - install-packages:
         packages: ruby
     - wantedly/pretty-slack-notify:
         webhook_url: $SLACK_WEBHOOK_URL
         failed_message: FAILURE - Pipeline completed. $WERCKER_RUN_URL

# This is a new workflow for push to resigtry dev.
push-to-registry-develop:
  # use a lightweight version of jre8-alpine container
  box: openjdk:8-jre-alpine
  steps:
    # remove unnecessary files to reduce the size of the container
    - script:
        name: prune container
        code: |
           rm -rf /pipeline/cache
           rm -rf /pipeline/output
    
    # Push to OCI-R -
    - internal/docker-push:
      username: $USERNAME
      password: $PASSWORD
      registry: $REGISTRY
      repository: $USERNAME/$REPOSITORY_DEV
      entrypoint: java -jar /pipeline/source/aml-risk-0.0.1-SNAPSHOT.jar

push-to-registry-test:
  # use a lightweight version of jre8-alpine container
  box: openjdk:8-jre-alpine
  steps:
    # remove unnecessary files to reduce the size of the container
    - script:
        name: prune container
        code: |
           rm -rf /pipeline/cache
           rm -rf /pipeline/output
    
    # Push to OCI-R -
    - internal/docker-push:
      username: $USERNAME
      password: $PASSWORD
      registry: $REGISTRY
      repository: $USERNAME/$REPOSITORY_TEST
      entrypoint: java -jar /pipeline/source/aml-risk-0.0.1-SNAPSHOT.jar

push-to-registry-uat:
  # use a lightweight version of jre8-alpine container
  box: openjdk:8-jre-alpine
  steps:
    # remove unnecessary files to reduce the size of the container
    - script:
        name: prune container
        code: |
           rm -rf /pipeline/cache
           rm -rf /pipeline/output
    
    # Push to OCI-R -
    - internal/docker-push:
      username: $USERNAME
      password: $PASSWORD
      registry: $REGISTRY
      repository: $USERNAME/$REPOSITORY_UAT
      entrypoint: java -jar /pipeline/source/aml-risk-0.0.1-SNAPSHOT.jar

# This is a new workflow for push to resigtry master.
push-to-registry-master:
  # use a lightweight version of jre8-alpine container
  box: openjdk:8-jre-alpine
  steps:
    # remove unnecessary files to reduce the size of the container
    - script:
        name: prune container
        code: |
           rm -rf /pipeline/cache
           rm -rf /pipeline/output
    
    # Push to OCI-R -
    - internal/docker-push:
      username: $USERNAME
      password: $PASSWORD
      registry: $REGISTRY
      repository: $USERNAME/$REPOSITORY_MASTER
      entrypoint: java -jar /pipeline/source/aml-risk-0.0.1-SNAPSHOT.jar

# This is a new workflow for deploy to oke dev.
deploy-to-oke-develop:
  box: maven:3.6.1-jdk-8
  steps:
  - script:
      name: Set API_KEY file
      code:  |
         echo -ne "-----BEGIN RSA PRIVATE KEY-----\n" > gen-api.pem
         echo -ne $OS_APIKEY | tr " " "\n" >> gen-api.pem
         echo -ne "\n-----END RSA PRIVATE KEY-----\n" >> gen-api.pem
         
  - oci-objectstore:
      region:       $OS_REGION
      tenancy-ocid: $OS_TENANCY_OCID
      user-ocid:    $OS_USER_OCID
      fingerprint:  $OS_FINGERPRINT
      namespace:    $OS_NAMESPACE
      bucket-name:  $OS_BUCKETNAME_DEV
      command:      get
      api-key:      "$(cat gen-api.pem)"
      object-name:  $OS_OBJECT_NAME
      
  - script:
      name: Set kubeconfig variable
      code: export KUBECONFIG=$PWD/$OS_OBJECT_NAME
      
  - wercker/kubectl@3.14.0:
      command: get nodes
      
  - wercker/kubectl@3.14.0:
      name: aml-risk-deployment
      command: apply -f kubernetes/dev/deployment.yaml
      
  - wercker/kubectl@3.14.0:
      name: rolling update aml-risk-deployment
  #    command: set image deployment/aml-risk aml-risk=fra.ocir.io/lolctech/fxapiuser/aml-risk:latest
  #    above real rolling update method is temporarily remove untill decide a deployment jar project versioning
      command: patch deployment aml-risk -n=fusionx-aml -p '{"spec":{"template":{"spec":{"containers":[{"name":"aml-risk", "env":[{"name":"LAST_MANUAL_RESTART","value":"'$(date +%s)'"}]}]}}}}'

  - wercker/kubectl@3.14.0:
      name: aml-risk-service
      command: apply -f kubernetes/dev/service.yaml
      
  - wercker/kubectl@3.14.0:
      name: aml-risk-virtual-service
      command: apply -f kubernetes/dev/virtualService.yaml

  - wercker/kubectl@3.14.0:
      name: aml-risk-horizontal-pod-autoscaler
      command: apply -f kubernetes/dev/horizontalPodAutoscaler.yaml      

  - wercker/kubectl@3.14.0:
      name: check deployment status
      command: rollout status deployment/aml-risk -n fusionx-aml

  after-steps:
    - install-packages:
        packages: ruby
    - wantedly/pretty-slack-notify:
        webhook_url: $SLACK_WEBHOOK_URL
        failed_message: FAILURE - Pipeline completed. $WERCKER_RUN_URL

# This is a new workflow for deploy to oke test.
deploy-to-oke-test:
  box: maven:3.6.1-jdk-8
  steps:
  - script:
      name: Set API_KEY file
      code:  |
         echo -ne "-----BEGIN RSA PRIVATE KEY-----\n" > gen-api.pem
         echo -ne $OS_APIKEY | tr " " "\n" >> gen-api.pem
         echo -ne "\n-----END RSA PRIVATE KEY-----\n" >> gen-api.pem
         
  - oci-objectstore:
      region:       $OS_REGION
      tenancy-ocid: $OS_TENANCY_OCID
      user-ocid:    $OS_USER_OCID
      fingerprint:  $OS_FINGERPRINT
      namespace:    $OS_NAMESPACE
      bucket-name:  $OS_BUCKETNAME_TEST
      command:      get
      api-key:      "$(cat gen-api.pem)"
      object-name:  $OS_OBJECT_NAME
      
  - script:
      name: Set kubeconfig variable
      code: export KUBECONFIG=$PWD/$OS_OBJECT_NAME
      
  - wercker/kubectl@3.14.0:
      command: get nodes
      
  - wercker/kubectl@3.14.0:
      name: aml-risk-deployment
      command: apply -f kubernetes/qa/deployment.yaml
      
  - wercker/kubectl@3.14.0:
      name: rolling update aml-risk-deployment
  #    command: set image deployment/aml-risk aml-risk=fra.ocir.io/lolctech/fxapiuser/aml-risk:latest
  #    above real rolling update method is temporarily remove untill decide a deployment jar project versioning
      command: patch deployment aml-risk -n=fusionx-aml -p '{"spec":{"template":{"spec":{"containers":[{"name":"aml-risk", "env":[{"name":"LAST_MANUAL_RESTART","value":"'$(date +%s)'"}]}]}}}}'

  - wercker/kubectl@3.14.0:
      name: aml-risk-service
      command: apply -f kubernetes/qa/service.yaml

  - wercker/kubectl@3.14.0:
      name: aml-risk-virtual-service
      command: apply -f kubernetes/qa/virtualService.yaml

  - wercker/kubectl@3.14.0:
      name: aml-risk-horizontal-pod-autoscaler
      command: apply -f kubernetes/qa/horizontalPodAutoscaler.yaml         

  - wercker/kubectl@3.14.0:
      name: check deployment status
      command: rollout status deployment/aml-risk -n fusionx-aml

  after-steps:
    - install-packages:
        packages: ruby
    - wantedly/pretty-slack-notify:
        webhook_url: $SLACK_WEBHOOK_URL
        failed_message: FAILURE - Pipeline completed. $WERCKER_RUN_URL

# This is a new workflow for deploy to oke uat.
deploy-to-oke-uat:
  box: maven:3.6.1-jdk-8
  steps:
  - script:
      name: Set API_KEY file
      code:  |
         echo -ne "-----BEGIN RSA PRIVATE KEY-----\n" > gen-api.pem
         echo -ne $OS_APIKEY | tr " " "\n" >> gen-api.pem
         echo -ne "\n-----END RSA PRIVATE KEY-----\n" >> gen-api.pem
          
  - oci-objectstore:
      region:       $OS_REGION
      tenancy-ocid: $OS_TENANCY_OCID
      user-ocid:    $OS_USER_OCID
      fingerprint:  $OS_FINGERPRINT
      namespace:    $OS_NAMESPACE
      bucket-name:  $OS_BUCKETNAME_UAT
      command:      get
      api-key:      "$(cat gen-api.pem)"
      object-name:  $OS_OBJECT_NAME
      
  - script:
      name: Set kubeconfig variable
      code: export KUBECONFIG=$PWD/$OS_OBJECT_NAME
      
  - wercker/kubectl@3.14.0:
      command: get nodes
      
  - wercker/kubectl@3.14.0:
      name: aml-risk-deployment
      command: apply -f kubernetes/uat/deployment.yaml
      
  - wercker/kubectl@3.14.0:
      name: rolling update aml-risk-deployment
  #    command: set image deployment/aml-risk aml-risk=fra.ocir.io/lolctech/fxapiuser/aml-risk:latest
  #    above real rolling update method is temporarily remove untill decide a deployment jar project versioning
      command: patch deployment aml-risk -n=fusionx-aml -p '{"spec":{"template":{"spec":{"containers":[{"name":"aml-risk", "env":[{"name":"LAST_MANUAL_RESTART","value":"'$(date +%s)'"}]}]}}}}'

  - wercker/kubectl@3.14.0:
      name: aml-risk-service
      command: apply -f kubernetes/uat/service.yaml

  - wercker/kubectl@3.14.0:
      name: aml-risk-virtual-service
      command: apply -f kubernetes/uat/virtualService.yaml

  - wercker/kubectl@3.14.0:
      name: aml-risk-horizontal-pod-autoscaler
      command: apply -f kubernetes/uat/horizontalPodAutoscaler.yaml        

  - wercker/kubectl@3.14.0:
      name: check deployment status
      command: rollout status deployment/aml-risk -n fusionx-aml

  after-steps:
    - install-packages:
        packages: ruby
    - wantedly/pretty-slack-notify:
        webhook_url: $SLACK_WEBHOOK_URL
        failed_message: FAILURE - Pipeline completed. $WERCKER_RUN_URL

# This is a new workflow for deploy to oke master.
deploy-to-oke-master:
  box: maven:3.6.1-jdk-8
  steps:
  - script:
      name: Set API_KEY file
      code:  |
         echo -ne "-----BEGIN RSA PRIVATE KEY-----\n" > gen-api.pem
         echo -ne $OS_APIKEY | tr " " "\n" >> gen-api.pem
         echo -ne "\n-----END RSA PRIVATE KEY-----\n" >> gen-api.pem
         
  - oci-objectstore:
      region:       $OS_REGION
      tenancy-ocid: $OS_TENANCY_OCID
      user-ocid:    $OS_USER_OCID
      fingerprint:  $OS_FINGERPRINT
      namespace:    $OS_NAMESPACE
      bucket-name:  $OS_BUCKETNAME_MASTER
      command:      get
      api-key:      "$(cat gen-api.pem)"
      object-name:  $OS_OBJECT_NAME
      
  - script:
      name: Set kubeconfig variable
      code: export KUBECONFIG=$PWD/$OS_OBJECT_NAME
      
  - wercker/kubectl@3.14.0:
      command: get nodes
      
  - wercker/kubectl@3.14.0:
      name: aml-risk-deployment
      command: apply -f kubernetes/prod/deployment.yaml
      
  - wercker/kubectl@3.14.0:
      name: rolling update aml-risk-deployment
  #    command: set image deployment/aml-risk aml-risk=fra.ocir.io/lolctech/fxapiuser/aml-risk:latest
  #    above rreal rolling update method is temporarily remove untill decide a deployment jar project versioning
      command: patch deployment aml-risk -n=fusionx-aml -p '{"spec":{"template":{"spec":{"containers":[{"name":"aml-risk", "env":[{"name":"LAST_MANUAL_RESTART","value":"'$(date +%s)'"}]}]}}}}'
      
  - wercker/kubectl@3.14.0:
      name: aml-risk-service
      command: apply -f kubernetes/prod/service.yaml

  - wercker/kubectl@3.14.0:
      name: aml-risk-virtual-service
      command: apply -f kubernetes/prod/virtualService.yaml

  - wercker/kubectl@3.14.0:
      name: aml-risk-horizontal-pod-autoscaler
      command: apply -f kubernetes/prod/horizontalPodAutoscaler.yaml       

  - wercker/kubectl@3.14.0:
      name: check deployment status
      command: rollout status deployment/aml-risk -n fusionx-aml
            
  after-steps:
    - install-packages:
        packages: ruby
    - wantedly/pretty-slack-notify:
        webhook_url: $SLACK_WEBHOOK_URL
        failed_message: FAILURE - Pipeline completed. $WERCKER_RUN_URL
